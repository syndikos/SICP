#lang racket

(define (square x)
  (* x x))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (next a)
  (+ a 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (cube x)
  (* x x x))

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2)) add-dx b) dx))

;(define (f x)
  ;(+ (* 3 (square x)) (* 2 x) 3))


        
(define (simpson-integral f a b n)
  (define (y k)
  (f (+ a (* k h))))

  (define h
  (/ (- b a) n))

  

  (define (coefficient n)
    (cond ((= n 0) 0)
          ((= (remainder n 2) 0)
           2)
          (else 4)))
  (define (poly-term n)
    (* (y n) (coefficient n)))
  (* (/ h 3)
     (sum poly-term 0 inc n)))
(define (inc a)
  (+ a 1))


(define (iter-sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
       (iter (inc a) (+ (term a) result))))
  (iter a 0))

(define (product term a then b)
  (if (> a b)
      1
      (* (term a)
         (product term (then a) then b))))

(define (factor n)
  (product identity 1 inc n))

(define (custom-pi n)
  
  (* 4
     (/ 2 (+ 2 (* 2 n)))
     (product pi-f 1 inc n)))

(define (pi-f x)
  (square (/ (+ 2 (* 2 x))
             (+ 1 (* 2 x)))))
(define (iter-product  term a then b)
  
  (define (iter a result)
    
    (if (> a b)
        result
        (iter (then a) (* (term a) result))))
  (iter a 1))

(define (accumulat combiner null-value term a next b)
  (if (> a  b)
      null-value
      (combiner (term a)
                (accumulat combiner null-value term (next a) next b))))

(define (iter-accu combiner null-value term a next b)
  (define (iter a null-value)
    (if (> a b)
        null-value
        







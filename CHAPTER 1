(define (square x)
  (* x x))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (next a)
  (+ a 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (cube x)
  (* x x x))

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2)) add-dx b) dx))

;(define (f x)
  ;(+ (* 3 (square x)) (* 2 x) 3))


        
(define (simpson-integral f a b n)
  (define (y k)
  (f (+ a (* k h))))

  (define h
  (/ (- b a) n))

  

  (define (coefficient n)
    (cond ((= n 0) 0)
          ((= (remainder n 2) 0)
           2)
          (else 4)))
  (define (poly-term n)
    (* (y n) (coefficient n)))
  (* (/ h 3)
     (sum poly-term 0 inc n)))
(define (inc a)
  (+ a 1))
